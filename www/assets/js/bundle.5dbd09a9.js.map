{"version":3,"file":"bundle.5dbd09a9.js","mappings":";;;;;;;;;;;;;;;AAAA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AAGA;AAGA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AC1CA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AClDA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAWA;;;;;;;;;;;;;;;;;;;;;ACrBA;AAMA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AAGA;AAAA;AAAA;AAAA;AAGA;AAGA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;;;;;;;;;;;;;;;;;;;ACrHA;AAAA;AACA;AAIA;AACA;AAEA;AAAA;AACA;AAIA;AACA;AAEA;AAAA;AACA;AAIA;AACA;AAEA;AAAA;AACA;AAIA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;ACtCA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAIA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;;AAEA;AACA;AACA;AAKA;AACA;AACA;;AAIA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA","sources":["webpack://breathbox/./src/ts/actionText.ts","webpack://breathbox/./src/ts/common.ts","webpack://breathbox/./src/ts/reset.ts","webpack://breathbox/./src/ts/sharedIntervals.ts","webpack://breathbox/./src/ts/timer.ts","webpack://breathbox/./src/ts/vhFunc.ts","webpack://breathbox/./node_modules/@babel/runtime/helpers/esm/classCallCheck.js","webpack://breathbox/./node_modules/@babel/runtime/helpers/esm/createClass.js","webpack://breathbox/./node_modules/@babel/runtime/helpers/esm/defineProperty.js","webpack://breathbox/./node_modules/@babel/runtime/helpers/esm/toPrimitive.js","webpack://breathbox/./node_modules/@babel/runtime/helpers/esm/toPropertyKey.js","webpack://breathbox/./node_modules/@babel/runtime/helpers/esm/typeof.js","webpack://breathbox/webpack/bootstrap","webpack://breathbox/webpack/runtime/define property getters","webpack://breathbox/webpack/runtime/hasOwnProperty shorthand","webpack://breathbox/webpack/runtime/make namespace object","webpack://breathbox/./src/ts/main.ts"],"sourcesContent":["// We have to do this each time because the window can be resized\nimport { action } from './common'\n\nexport function startCountdownDecrement (\n  text: string,\n  time: number\n): ReturnType<typeof setInterval> {\n  let countdownInterval: ReturnType<typeof setInterval> | null\n  countdownInterval = setInterval(() => {\n    --time\n    if (time !== 0) {\n      action.textContent = text + '\\r\\n' + time\n    } else {\n      action.textContent = text\n      // It cancels itself\n      clearInterval(countdownInterval!)\n      countdownInterval = null\n    }\n  }, 1000)\n  // Do it the first time\n  action.textContent = text + '\\r\\n' + time\n\n  return countdownInterval\n}\n","export const box = document.querySelector('.breath-box') as HTMLElement\nexport const boxRect = box.getBoundingClientRect()\nexport const circle = document.querySelector('.circle') as HTMLElement\nexport const action = document.querySelector('.action') as HTMLElement\nexport const start = document.querySelector('.timer-start') as HTMLElement\nexport const stopButton = document.querySelector('.stop') as HTMLElement\nexport const pauseButton = document.querySelector('.pause') as HTMLElement\nexport const breathTimeInput = document.querySelector(\n  '#breath-time'\n) as HTMLInputElement\nexport const holdTimeInput = document.querySelector(\n  '#hold-time'\n) as HTMLInputElement\nexport const timerMinutesInput = document.querySelector(\n  '#countdown-minutes'\n) as HTMLInputElement\nexport const timerSecondsInput = document.querySelector(\n  '#countdown-seconds'\n) as HTMLInputElement\nexport const timerDirection = document.querySelector(\n  '#time-arrow'\n) as HTMLElement\nexport const config = document.querySelector('.config') as HTMLElement\nexport const controlBar = document.querySelector('.control-bar') as HTMLElement\n\nexport const DEFAULT_BACKGROUND_COLOR = '#1e3250'\nexport const INHALE_COLOR = '#0f5362'\nexport const EXHALE_COLOR = '#c08845'\nexport const RESET_ORANGE = '#f6786e'\n\nexport const LARGE_CIRCLE_SIZE = 6\nexport const SMALL_CIRCLE_SIZE = 2\n\nexport const SMOOTH_PATH_TIMING = 1000\nexport const BREATH_CURVE = 'cubic-bezier(.13,.38,.48,1.02)'\n\nexport const INHALE = 'INHALE'\nexport const EXHALE = 'EXHALE'\nexport const HOLD = 'HOLD'\nexport const INHALE_SIZE = 8\nexport const EXHALE_SIZE = 4\nexport const DEFAULT_ACTION_TEXT = 'Breath Box'\nexport const DEFAULT_ACTION_FONT_SIZE = '5vh'\n","import * as common from './common'\nimport { SharedIntervals } from './sharedIntervals'\nimport { Timer } from './timer'\n\nexport function resetCircle (): undefined {\n  common.circle.style.width = common.SMALL_CIRCLE_SIZE + 'vh'\n  common.circle.style.height = common.SMALL_CIRCLE_SIZE + 'vh'\n  common.circle.style.backgroundColor = common.RESET_ORANGE\n  common.circle.style.transitionProperty = ''\n  common.circle.style.transitionDuration = ''\n  common.circle.style.transitionTimingFunction = ''\n  common.circle.style.bottom = '-1vh'\n  common.circle.style.left = '-1vh'\n}\n\nexport function resetStartButton (): undefined {\n  common.start.style.color = 'white'\n  common.start.style.border = '4px solid green'\n  common.start.style.backgroundColor = 'lightgreen'\n  common.start.style.borderRadius = '5vw'\n  common.start.textContent = 'Start'\n  common.start.classList.add('button')\n}\n\nexport function resetActionText (text: string): undefined {\n  text = text ?? common.DEFAULT_ACTION_TEXT\n  common.action.textContent = text\n  common.action.style.fontSize = common.DEFAULT_ACTION_FONT_SIZE\n  common.action.style.color = common.RESET_ORANGE\n}\nresetActionText('')\n\nexport function resetAnimations (): undefined {\n  clearTimeout(SharedIntervals.inhaleAnimation!)\n  SharedIntervals.inhaleAnimation = null\n  clearInterval(SharedIntervals.inhaleCountdownInterval!)\n  SharedIntervals.inhaleCountdownInterval = null\n  clearTimeout(SharedIntervals.holdInAnimation!)\n  SharedIntervals.holdInAnimation = null\n  clearInterval(SharedIntervals.holdInCountdownInterval!)\n  SharedIntervals.holdInCountdownInterval = null\n  clearTimeout(SharedIntervals.exhaleAnimation!)\n  SharedIntervals.exhaleAnimation = null\n  clearInterval(SharedIntervals.exhaleCountdownInterval!)\n  SharedIntervals.exhaleCountdownInterval = null\n  clearTimeout(SharedIntervals.holdOutAnimation!)\n  SharedIntervals.holdOutAnimation = null\n  clearInterval(SharedIntervals.holdOutCountdownInterval!)\n  SharedIntervals.holdOutCountdownInterval = null\n  Timer.clearInterval()\n}\n","class Timeouts {\n  constructor () {\n    this.inhaleAnimation = null\n    this.inhaleCountdownInterval = null\n    this.holdInAnimation = null\n    this.holdInCountdownInterval = null\n    this.exhaleAnimation = null\n    this.exhaleCountdownInterval = null\n    this.holdOutAnimation = null\n    this.holdOutCountdownInterval = null\n  }\n\n  inhaleAnimation: ReturnType<typeof setTimeout> | null\n  inhaleCountdownInterval: ReturnType<typeof setInterval> | null\n  holdInAnimation: ReturnType<typeof setTimeout> | null\n  holdInCountdownInterval: ReturnType<typeof setInterval> | null\n  exhaleAnimation: ReturnType<typeof setTimeout> | null\n  exhaleCountdownInterval: ReturnType<typeof setInterval> | null\n  holdOutAnimation: ReturnType<typeof setTimeout> | null\n  holdOutCountdownInterval: ReturnType<typeof setInterval> | null\n}\nexport const SharedIntervals = new Timeouts()\n","import {\n  pauseButton,\n  start,\n  stopButton,\n  timerMinutesInput,\n  timerSecondsInput\n} from './common'\n\nclass TimerClass {\n  private minutes: number\n  private seconds: number\n  private timerInterval: ReturnType<typeof setInterval> | null\n  private targetTime: number\n  private internalTimer: number\n  private ascending: boolean\n\n  constructor () {\n    this.minutes = 0\n    this.seconds = 0\n    this.internalTimer = 0\n    this.targetTime = 600\n    this.timerInterval = null\n    this.ascending = true\n  }\n\n  getMinuteInput (): number {\n    return timerMinutesInput.value === ''\n      ? 0\n      : parseInt(timerMinutesInput.value)\n  }\n\n  getSecondInput (): number {\n    return timerSecondsInput.value === ''\n      ? 0\n      : parseInt(timerSecondsInput.value)\n  }\n\n  startTimer (): undefined {\n    this.reset()\n    this.timerFn()\n    this.targetTime = this.getMinuteInput() * 60 + this.getSecondInput()\n    start.style.backgroundColor = 'transparent'\n    start.style.border = 'none'\n    start.classList.remove('button')\n    this.timerInterval = setInterval(this.timerFn.bind(this), 1000)\n  }\n\n  timerFn (): undefined {\n    this.ascending ? this.incrementTimer() : this.decrementTimer()\n  }\n\n  incrementTimer (): undefined {\n    ++this.seconds\n    if (this.seconds === 60) {\n      ++this.minutes\n      this.seconds = 0\n    }\n    start.textContent =\n      '' +\n      this.minutes +\n      ':' +\n      (this.seconds < 10 ? '0' + this.seconds : this.seconds)\n\n    ++this.internalTimer\n  }\n\n  decrementTimer (): undefined {\n    if (this.seconds <= 0) {\n      --this.minutes\n      this.seconds = 60\n    }\n    --this.seconds\n    start.textContent =\n      '' +\n      this.minutes +\n      ':' +\n      (this.seconds < 10 ? '0' + this.seconds : this.seconds)\n\n    ++this.internalTimer\n  }\n\n  updateMinutesAndSeconds (seconds: number): undefined {\n    this.minutes = Math.floor(seconds / 60)\n    this.seconds = seconds % 60\n  }\n\n  addPauseButton (): undefined {\n    pauseButton.style.display = 'flex'\n  }\n\n  addStopButton (): undefined {\n    stopButton.style.display = 'flex'\n  }\n\n  reset (): undefined {\n    this.minutes = this.ascending ? 0 : this.getMinuteInput()\n    this.seconds = this.ascending ? 0 : this.getSecondInput()\n\n    this.internalTimer = 0\n\n    clearInterval(this.timerInterval!)\n  }\n\n  reachedTime (): boolean {\n    return this.internalTimer >= this.targetTime\n  }\n\n  switchDirection (): undefined {\n    this.ascending = !this.ascending\n  }\n\n  clearInterval (): undefined {\n    clearInterval(this.timerInterval!)\n    this.timerInterval = null\n  }\n}\n\nexport const Timer = new TimerClass()\n","export function vhToPx (percent: number): number {\n  const h = Math.max(\n    document.documentElement.clientHeight,\n    window.innerHeight ?? 0\n  )\n  return (percent * h) / 100\n}\n\nexport function vwToPx (percent: number): number {\n  const w = Math.max(\n    document.documentElement.clientWidth,\n    window.innerWidth ?? 0\n  )\n  return (percent * w) / 100\n}\n\nexport function pxToVh (px: number): number {\n  const h = Math.max(\n    document.documentElement.clientHeight,\n    window.innerHeight ?? 0\n  )\n  return (px / h) * 100\n}\n\nexport function pxToVw (px: number): number {\n  const w = Math.max(\n    document.documentElement.clientWidth,\n    window.innerWidth ?? 0\n  )\n  return (px / w) * 100\n}\n\nexport function vmin (percent: number): number {\n  return Math.min(pxToVh(percent), pxToVw(percent))\n}\n\nexport function vmax (percent: number): number {\n  return Math.max(pxToVh(percent), pxToVw(percent))\n}\n","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","import toPropertyKey from \"./toPropertyKey.js\";\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, toPropertyKey(descriptor.key), descriptor);\n  }\n}\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}","import toPropertyKey from \"./toPropertyKey.js\";\nexport default function _defineProperty(obj, key, value) {\n  key = toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}","import _typeof from \"./typeof.js\";\nexport default function _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}","import _typeof from \"./typeof.js\";\nimport toPrimitive from \"./toPrimitive.js\";\nexport default function _toPropertyKey(arg) {\n  var key = toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}","export default function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { vhToPx } from './vhFunc'\nimport { startCountdownDecrement } from './actionText'\nimport * as common from './common'\nimport { SharedIntervals } from './sharedIntervals'\nimport { Timer } from './timer'\nimport {\n  resetActionText,\n  resetAnimations,\n  resetCircle,\n  resetStartButton\n} from './reset'\n\nfunction animateBreathing (): undefined {\n  const inhaleDuration = parseInt(common.breathTimeInput.value)\n  const holdInDuration = parseInt(common.holdTimeInput.value)\n  const exhaleDuration = parseInt(common.breathTimeInput.value)\n  const holdOutDuration = parseInt(common.holdTimeInput.value)\n\n  // Inhale (up)\n  SharedIntervals.inhaleCountdownInterval = startCountdownDecrement(\n    common.INHALE,\n    inhaleDuration\n  )\n  common.action.style.transitionDuration = `${inhaleDuration}s`\n  common.action.style.transitionTimingFunction = `${common.BREATH_CURVE}`\n  common.action.style.fontSize = `${common.INHALE_SIZE}vh`\n  common.action.style.color = common.INHALE_COLOR\n\n  common.circle.style.transitionProperty =\n    'height width background-color left bottom'\n  common.circle.style.transitionDuration = `${inhaleDuration}s`\n  common.circle.style.transitionTimingFunction = `${common.BREATH_CURVE}`\n  common.circle.style.backgroundColor = common.INHALE_COLOR\n  common.circle.style.height = `${common.LARGE_CIRCLE_SIZE}vh`\n  common.circle.style.width = `${common.LARGE_CIRCLE_SIZE}vh`\n  common.circle.style.bottom = `${\n    common.box.clientHeight - vhToPx(common.LARGE_CIRCLE_SIZE) / 2\n  }px`\n  common.circle.style.left = `-${common.LARGE_CIRCLE_SIZE / 2}vh`\n\n  // Hold In (right)\n  SharedIntervals.holdInAnimation = setTimeout(() => {\n    SharedIntervals.holdInCountdownInterval = startCountdownDecrement(\n      common.HOLD,\n      holdInDuration\n    )\n\n    common.circle.style.transitionDuration = `${holdInDuration}s`\n    common.circle.style.transitionTimingFunction = 'linear'\n    common.circle.style.left = `${\n      common.box.clientWidth - vhToPx(common.LARGE_CIRCLE_SIZE) / 2\n    }px`\n\n    // Exhale (down)\n    SharedIntervals.exhaleAnimation = setTimeout(() => {\n      SharedIntervals.exhaleCountdownInterval = startCountdownDecrement(\n        common.EXHALE,\n        exhaleDuration\n      )\n      common.action.style.fontSize = `${common.EXHALE_SIZE}vh`\n      common.action.style.color = common.EXHALE_COLOR\n\n      common.circle.style.transitionProperty = 'height width color left bottom'\n      common.circle.style.transitionDuration = `${exhaleDuration}s`\n      common.circle.style.transitionTimingFunction = `${common.BREATH_CURVE}`\n      common.circle.style.backgroundColor = common.EXHALE_COLOR\n      common.circle.style.height = `${common.SMALL_CIRCLE_SIZE}vh`\n      common.circle.style.width = `${common.SMALL_CIRCLE_SIZE}vh`\n      common.circle.style.bottom = `-${common.SMALL_CIRCLE_SIZE / 2}vh`\n      common.circle.style.left = `${\n        common.box.clientWidth - vhToPx(common.SMALL_CIRCLE_SIZE) / 2\n      }px`\n\n      // Hold out (left)\n      SharedIntervals.holdOutAnimation = setTimeout(() => {\n        SharedIntervals.holdOutCountdownInterval = startCountdownDecrement(\n          common.HOLD,\n          holdOutDuration\n        )\n\n        common.circle.style.transitionDuration = `${holdInDuration}s`\n        common.circle.style.transitionTimingFunction = 'linear'\n        common.circle.style.bottom = `-${common.SMALL_CIRCLE_SIZE / 2}vh`\n        common.circle.style.left = `-${common.SMALL_CIRCLE_SIZE / 2}vh`\n\n        SharedIntervals.inhaleAnimation = setTimeout(() => {\n          animateBreathing() // Restart the cycle\n        }, holdOutDuration * common.SMOOTH_PATH_TIMING)\n      }, exhaleDuration * common.SMOOTH_PATH_TIMING)\n    }, holdInDuration * common.SMOOTH_PATH_TIMING)\n  }, inhaleDuration * common.SMOOTH_PATH_TIMING)\n}\n\nfunction validInputs (): boolean {\n  let valid = true\n  if (\n    (common.timerMinutesInput.value === '' ||\n      common.timerMinutesInput.value === '0') &&\n    (common.timerSecondsInput.value === '' ||\n      common.timerSecondsInput.value === '0')\n  ) {\n    common.timerMinutesInput.classList.add('red')\n    common.timerSecondsInput.classList.add('red')\n    valid = false\n  } else {\n    common.timerMinutesInput.classList.remove('red')\n    common.timerSecondsInput.classList.remove('red')\n  }\n\n  if (\n    common.breathTimeInput.value === '' ||\n    common.breathTimeInput.value === '0'\n  ) {\n    common.breathTimeInput.classList.add('red')\n    valid = false\n  } else {\n    common.breathTimeInput.classList.remove('red')\n  }\n\n  if (common.holdTimeInput.value === '' || common.holdTimeInput.value === '0') {\n    common.holdTimeInput.classList.add('red')\n    valid = false\n  } else {\n    common.holdTimeInput.classList.remove('red')\n  }\n\n  return valid\n}\n\nlet started = false\nlet checkTimerInterval: ReturnType<typeof setInterval> | null\nfunction startBreathBox (): undefined {\n  if (!validInputs() || started) {\n    return\n  }\n  common.config.classList.add('hidden')\n  common.controlBar.classList.add('top-buffer')\n\n  started = true\n  Timer.startTimer()\n  checkTimerInterval = setInterval(checkTimer, 1000)\n  Timer.addPauseButton()\n  Timer.addStopButton()\n  resetActionText('')\n  resetCircle()\n  animateBreathing()\n}\n\nconst tone = new Audio('assets/audio/tone.mp3')\nfunction checkTimer (): undefined {\n  if (started && Timer.reachedTime()) {\n    void tone.play()\n    setTimeout(() => {\n      alert('You have reached your target!')\n    }, 50)\n    stopBreathBox()\n  }\n}\n\nfunction stopBreathBox (): undefined {\n  started = false\n\n  Timer.reset()\n  clearTimeout(checkTimerInterval!)\n  resetAnimations()\n  resetActionText('')\n  resetCircle()\n  resetStartButton()\n  common.stopButton.style.display = 'none'\n  common.pauseButton.style.display = 'none'\n  common.config.classList.remove('hidden')\n  common.controlBar.classList.remove('top-buffer')\n}\n\nfunction pauseBreathBox (): undefined {\n  started = false\n\n  resetAnimations()\n  resetActionText('Paused')\n  common.action.style.color = '#ff8c00' // dark orange\n  resetCircle()\n\n  common.pauseButton.style.color = 'green'\n  common.pauseButton.textContent = '▶'\n\n  common.pauseButton.onclick = resumeBreathBox\n}\n\nfunction resumeBreathBox (): undefined {\n  common.pauseButton.style.color = common.RESET_ORANGE\n  common.pauseButton.textContent = '||'\n\n  common.pauseButton.onclick = pauseBreathBox\n\n  startBreathBox()\n}\n\nfunction flipArrow (): undefined {\n  if (common.timerDirection.classList.contains('point-up')) {\n    common.timerDirection.classList.replace('point-up', 'point-down')\n  } else {\n    common.timerDirection.classList.replace('point-down', 'point-up')\n  }\n  Timer.switchDirection()\n}\n\ncommon.timerDirection.onclick = flipArrow\n\ncommon.start.onclick = startBreathBox\ncommon.stopButton.onclick = stopBreathBox\ncommon.pauseButton.onclick = pauseBreathBox\n"],"names":[],"sourceRoot":""}